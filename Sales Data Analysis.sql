CREATE TABLE Sales (
    transaction_id INT,
    transaction_date DATE,
    transaction_time TIME,
	transaction_qty INT,
	store_id INT,
    store_location VARCHAR,
	product_id INT,
	unit_price DECIMAL,
    product_category VARCHAR,
    product_type VARCHAR,
	product_detail VARCHAR
);

SET datestyle = 'DMY';
COPY sales from 'E:/Data Science Course/Final Evaluation-sept/SQL/Coffee_Shop_Sales.csv'DELIMITER ','
CSV HEADER;

---1.Retrieve the top 5 products with the highest sales frequency for each product category.
SELECT product_category, product_id, product_type, SUM(transaction_qty) AS total_quantity_sold
FROM sales GROUP BY product_category,product_id, product_type
ORDER BY total_quantity_sold DESC
LIMIT 5;

--2.Calculate the total revenue generated by each store during January 2023
SELECT store_location ,sum(transaction_qty*unit_price) as total_revenue 
FROM sales where transaction_date BETWEEN '2023-01-01' AND '2023-01-31' 
GROUP BY store_location;

--3.List all unique product types that were sold in the store located in 'Lower Manhattan'
SELECT DISTINCT product_type ,store_location FROM sales
where store_location ='Lower Manhattan';

--4.Calculate the total number of transactions that occurred before 12:00 PM on any given day.
SELECT COUNT(*) AS total_transactions
FROM sales WHERE transaction_time < '12:00:00';

--5.Calculate the average revenue per transaction for each product category during peak hours (7 AM - 9 AM) and non-peak hours, broken down by each store.
SELECT store_location, product_category, 
 AVG(CASE WHEN transaction_time BETWEEN '07:00:00' AND '09:00:00'  THEN transaction_qty * unit_price END)
 AS avg_revenue_peak_hours,
 AVG(CASE WHEN transaction_time NOT BETWEEN '07:00:00' AND '09:00:00'  THEN transaction_qty * unit_price END) 
 AS avg_revenue_non_peak_hours FROM sales GROUP BY store_location,product_category;

--6.Retrieve the product that experienced the largest price fluctuations (i.e., the difference between the highest and lowest price) across all transactions.
SELECT product_id,product_type,MAX(unit_price)-MIN(unit_price) AS price_fluctuations FROM sales
GROUP BY product_id,product_type ORDER BY price_fluctuations DESC LIMIT 1;

--7.List all products that were sold in every store at least once.
SELECT product_id, product_type
FROM sales GROUP BY product_id, product_type
HAVING COUNT(DISTINCT store_location) = (SELECT COUNT(DISTINCT store_location) FROM sales);

--8.Identify the top 5 days where the total transaction quantity deviated the most from the average daily transaction quantity.
SELECT transaction_date,ABS(Total_qty - Avg_total_qty) AS deviation
FROM (SELECT transaction_date,SUM(transaction_qty) AS Total_qty,
AVG(SUM(transaction_qty)) OVER() AS Avg_total_qty FROM sales GROUP BY transaction_date
) AS daily_totals 
ORDER BY transaction_date DESC
LIMIT 5;

--9.Retrieve the store location and total revenue for each store where the average unit price is greater than $2.50.
SELECT store_location,sum(transaction_qty*unit_price) as total_revenue
FROM sales GROUP BY store_location HAVING AVG(unit_price)>2.50;

--10.Identify the product with the highest average sales quantity per transaction in each store.
SELECT store_location,product_id, product_type,AVG(transaction_qty) as avg_qty FROM sales 
GROUP BY store_location,product_id,product_type ORDER BY avg_qty DESC;